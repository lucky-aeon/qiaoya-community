server:
  port: 8520

spring:
  application:
    name: qiaoya-community
  profiles:
    active: ${ENVIRONMENT:local}

  # 数据库配置
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:qiaoya_community}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:password}
    driver-class-name: org.postgresql.Driver
    hikari:
      # Ensure each DB connection uses Asia/Shanghai so DEFAULT CURRENT_TIMESTAMP is correct
      connection-init-sql: "SET TIME ZONE 'Asia/Shanghai'"

  jackson:
    # Ensure JSON serialization/deserialization uses Asia/Shanghai 1
    time-zone: Asia/Shanghai

  # Redis配置
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: ${REDIS_DATABASE:0}
      timeout: 5000ms
      lettuce:
        pool:
          max-active: 20
          max-wait: -1ms
          max-idle: 8
          min-idle: 0

  # FlyWay配置
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true

  # Spring AI 配置
  ai:
    openai:
      # API Key（建议使用环境变量）
      api-key: ${AI_API_KEY:sk-vvuygphyytcyyordwrcbcjuvctkzmguaqlyhbkipuhcvxibi}
      # Base URL（可选，支持兼容 OpenAI 接口的其他模型服务）
      base-url: ${AI_OPENAI_BASE_URL:https://api.siliconflow.cn}
      # 聊天模型配置（可选）
      chat:
        options:
          model: ${AI_MODEL:Qwen/Qwen3-VL-30B-A3B-Instruct}
          temperature: 0.7

# MyBatis Plus配置
mybatis-plus:
  configuration:
    map-underscore-to-camel-case: true
    # 禁用 MyBatis SQL 日志，防止输出到 Loki（可用环境变量临时开启）
    # 可覆盖：export MYBATIS_LOG_IMPL=org.apache.ibatis.logging.slf4j.Slf4jImpl
    log-impl: ${MYBATIS_LOG_IMPL:org.apache.ibatis.logging.nologging.NoLoggingImpl}
  global-config:
    db-config:
      id-type: auto
    banner: false
  mapper-locations: classpath:mapper/*.xml

# 阿里云OSS配置
aliyun:
  oss:
    endpoint: ${ALIYUN_OSS_ENDPOINT:https://oss-cn-beijing.aliyuncs.com}
    access-key-id: ${ALIYUN_ACCESS_KEY_ID:your-access-key-id}
    access-key-secret: ${ALIYUN_ACCESS_KEY_SECRET:your-access-key-secret}
    bucket-name: ${ALIYUN_OSS_BUCKET:your-bucket-name}
    region: ${ALIYUN_OSS_REGION:cn-beijing}
    role-arn: ${ALIYUN_STS_ROLE_ARN:acs:ram::your-account-id:role/your-role-name}
    custom-domain: ${ALIYUN_OSS_CUSTOM_DOMAIN:https://oss.xhyovo.cn}
    presigned-url-expiration: 3600
    callback:
      url: ${ALIYUN_OSS_CALLBACK_URL:https://45453734.r2.cpolar.top/api/public/oss-callback}
      body: filename=${object}&size=${size}&mimeType=${mimeType}&height=${imageInfo.height}&width=${imageInfo.width}
      body-type: application/x-www-form-urlencoded
  # 邮件服务配置
  email:
    smtp:
      host: ${ALIYUN_EMAIL_SMTP_HOST:smtpdm.aliyun.com}
      port: ${ALIYUN_EMAIL_SMTP_PORT:25}
      username: ${ALIYUN_EMAIL_USERNAME:your-email@your-domain.com}
      password: ${ALIYUN_EMAIL_PASSWORD:your-smtp-password}
      sender-name: ${ALIYUN_EMAIL_SENDER_NAME:敲鸭社区}
      enabled: ${ALIYUN_EMAIL_ENABLED:true}

# 日志配置
logging:
  level:
    org.xhy.community: debug
    org.springframework.web: info
    # 收紧 MyBatis 相关日志级别，避免 DEBUG 级别输出 SQL
    com.baomidou.mybatisplus: warn
    org.apache.ibatis: warn
  pattern:
    console: '%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n'

# 管理端点配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when_authorized
      probes:
        enabled: true
  metrics:
    tags:
      service: ${spring.application.name}
  # Prometheus 导出（存在依赖 micrometer-registry-prometheus 时自动启用）
  prometheus:
    metrics:
      export:
        enabled: true

# 邮件品牌配置
community:
  email:
    brand:
      # 支持 URL 或 data URI；若留空，将尝试从 logoFile/classpath 默认位置读取
      # logoSrc: ""
      # 使用 classpath 中的 logo 文件自动生成 data URI
      logoFile: classpath:branding/logo-email.jpg
      # 页脚"管理通知设置"链接
      manageNotificationsUrl: /dashboard/user-backend/profile
  # 站点基础域名（用于将相对路径解析为绝对 URL）
  web:
    base-url: ${COMMUNITY_WEB_BASE_URL:http://code.dev.xhyovo.cn/}

# OAuth2 授权服务器配置
oauth2:
  frontend:
    # 前端授权页面URL（用户未登录或需要授权同意时重定向到此页面）
    authorize-url: ${OAUTH2_FRONTEND_AUTHORIZE_URL:http://localhost:5173/oauth2/authorize}

# 备份报表读取配置（平台查看备份情况）
backup:
  enabled: ${BACKUP_ENABLED:true}
  # 容器内可见的报表目录，建议通过 Docker 将宿主机路径只读挂载到该目录
  # 宿主机路径：/www/project/qiaoya/backup/reports -> 容器内：/data/db-backups/reports
  reports-dir: ${BACKUP_REPORTS_DIR:/www/project/qiaoya/backup/reports}
