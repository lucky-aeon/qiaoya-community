name: CI/CD Dev

on:
  push:
    branches: [ dev ]

concurrency:
  group: dev-deploy
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      # 国内仓库配置（例如：registry.cn-hangzhou.aliyuncs.com）
      CN_REGISTRY: ${{ secrets.CN_REGISTRY }}
      # 完整仓库路径（例如：registry.cn-hangzhou.aliyuncs.com/namespace/qiaoya-community）
      CN_IMAGE: ${{ secrets.CN_IMAGE }}
      IMAGE_NAME: ${{ github.repository }}
      TAG_SHA: dev-${{ github.sha }}
    outputs:
      image: ${{ steps.out-image.outputs.image }}
    steps:
      - uses: actions/checkout@v4

      - name: Validate CN registry config (domestic-only)
        run: |
          if [ -z "${{ env.CN_IMAGE }}" ] || [ -z "${{ env.CN_REGISTRY }}" ]; then
            echo "CN_IMAGE/CN_REGISTRY must be set for dev (domestic-only mode)." >&2
            exit 1
          fi

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Build with Maven
        run: mvn -B -DskipTests package

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to CN Registry
        if: ${{ env.CN_REGISTRY != '' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CN_REGISTRY }}
          username: ${{ secrets.CN_USERNAME }}
          password: ${{ secrets.CN_PASSWORD }}

      - name: Build and push image (CN Registry)
        if: ${{ env.CN_IMAGE != '' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.CN_IMAGE }}:dev-latest
            ${{ env.CN_IMAGE }}:${{ env.TAG_SHA }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Compute image for downstream
        id: out-image
        run: |
          echo "image=${{ env.CN_IMAGE }}:${{ env.TAG_SHA }}" >> "$GITHUB_OUTPUT"

  smoke-test:
    name: Smoke Test (Container)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    needs: build-and-push
    env:
      CN_REGISTRY: ${{ secrets.CN_REGISTRY }}
      CN_USERNAME: ${{ secrets.CN_USERNAME }}
      CN_PASSWORD: ${{ secrets.CN_PASSWORD }}
      CN_IMAGE: ${{ secrets.CN_IMAGE }}
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      TAG_SHA: dev-${{ github.sha }}
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres" --health-interval=5s --health-timeout=5s --health-retries=20
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping || exit 1" --health-interval=5s --health-timeout=5s --health-retries=20
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        if: ${{ env.CN_REGISTRY == '' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to CN Registry
        if: ${{ env.CN_REGISTRY != '' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CN_REGISTRY }}
          username: ${{ secrets.CN_USERNAME }}
          password: ${{ secrets.CN_PASSWORD }}

      - name: Prepare DB and tools
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client curl jq
          for i in $(seq 1 60); do
            pg_isready -h 127.0.0.1 -p 5432 -U postgres && break || sleep 2
          done
          PGPASSWORD=postgres psql -h 127.0.0.1 -U postgres -p 5432 -c "CREATE DATABASE qiaoya_community;" || true

      - name: Resolve image tag and pull (CN only)
        env:
          IMAGE_FROM_BUILD: ${{ needs.build-and-push.outputs.image }}
        run: |
          set -e
          IMAGE="$IMAGE_FROM_BUILD"
          if [ -z "$IMAGE" ]; then
            IMAGE="$CN_IMAGE:$TAG_SHA"
          fi
          echo "Using image: $IMAGE"
          docker pull "$IMAGE"
          echo "IMAGE_RESOLVED=$IMAGE" >> $GITHUB_ENV

      - name: Run app container
        run: |
          docker run -d --name app -p 18520:8520 \
            --add-host=host.docker.internal:host-gateway \
            -e SPRING_PROFILES_ACTIVE=dev \
            -e DB_HOST=host.docker.internal -e DB_PORT=5432 -e DB_USERNAME=postgres -e DB_PASSWORD=postgres \
            -e REDIS_HOST=host.docker.internal -e REDIS_PORT=6379 -e REDIS_DATABASE=0 \
            "$IMAGE_RESOLVED"

      - name: Wait health up
        run: |
          set -e
          for i in $(seq 1 120); do
            resp=$(curl -fsS http://127.0.0.1:18520/api/public/health || true)
            status=$(echo "$resp" | jq -r '.data.status // empty')
            if [ "$status" = "UP" ]; then echo "Health UP"; exit 0; fi
            sleep 2
          done
          echo "Health timeout" >&2
          docker logs --tail=200 app || true
          exit 1

      - name: Public endpoints smoke
        run: |
          set -e
          curl -fsS http://127.0.0.1:18520/api/public/stats/users | jq . >/dev/null
          curl -fsS http://127.0.0.1:18520/api/public/testimonials | jq . >/dev/null
          curl -fsS http://127.0.0.1:18520/api/public/subscription-plans | jq . >/dev/null

      - name: Cleanup
        if: always()
        run: docker rm -f app || true

  deploy:
    name: Deploy (dev)
    runs-on: ubuntu-latest
    needs: [ build-and-push, smoke-test ]
    env:
      CN_IMAGE: ${{ secrets.CN_IMAGE }}
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      TAG_SHA: dev-${{ github.sha }}
    steps:
      - name: Resolve image tag for deploy (CN only)
        env:
          IMAGE_FROM_BUILD: ${{ needs.build-and-push.outputs.image }}
        run: |
          set -e
          IMAGE="$IMAGE_FROM_BUILD"
          if [ -z "$IMAGE" ]; then
            IMAGE="$CN_IMAGE:$TAG_SHA"
          fi
          echo "Using deploy image: $IMAGE"
          echo "IMAGE_RESOLVED=$IMAGE" >> $GITHUB_ENV
      - name: Deploy via SSH (dev)
        uses: appleboy/ssh-action@v1.0.3
        env:
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          SCRIPT_PATH: ${{ secrets.DEPLOY_SCRIPT_PATH }}
          IMAGE: ${{ env.IMAGE_RESOLVED }}
          PROFILE: dev
          PORT: 8528
          CONTAINER_NAME: qiaoya-community-backend
          CN_REGISTRY: ${{ secrets.CN_REGISTRY }}
          CN_USERNAME: ${{ secrets.CN_USERNAME }}
          CN_PASSWORD: ${{ secrets.CN_PASSWORD }}
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          envs: GHCR_USERNAME,GHCR_TOKEN,SCRIPT_PATH,IMAGE,PROFILE,PORT,CONTAINER_NAME,CN_REGISTRY,CN_USERNAME,CN_PASSWORD
          script: |
            set -e
            SCRIPT_PATH="${SCRIPT_PATH:-/www/project/qiaoya/deploy-qiaoya.sh}"
            if [ -n "${CN_REGISTRY}" ] && [ -n "${CN_USERNAME}" ] && [ -n "${CN_PASSWORD}" ]; then
              echo "${CN_PASSWORD}" | docker login "${CN_REGISTRY}" -u "${CN_USERNAME}" --password-stdin
            fi
            chmod +x "$SCRIPT_PATH" || true
            "$SCRIPT_PATH"
